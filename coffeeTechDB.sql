-- BASIC CONFIGURATION

SET client_encoding = 'UTF8';

-- EXTENSIONS

CREATE EXTENSION pg_stat_statements;

BEGIN;

-- TABLES

CREATE TABLE coffee_variety (
    coffee_variety_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE cultural_works (
    cultural_works_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT
);

CREATE TABLE cultural_work_tasks (
    cultural_work_tasks_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cultural_works_id integer NOT NULL,
    plot_id integer NOT NULL,
    reminder_owner boolean NOT NULL,
    reminder_collaborator boolean NOT NULL,
    collaborator_user_id integer NOT NULL,
    owner_user_id integer NOT NULL,
    status_id integer NOT NULL,
    task_date date,
    created_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE flowering (
    flowering_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    plot_id integer NOT NULL,
    flowering_date date NOT NULL,
    harvest_date date,
    status_id integer NOT NULL,
    flowering_type_id integer NOT NULL
);

CREATE TABLE flowering_type (
    flowering_type_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE health_checks (
    health_checks_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    check_date date NOT NULL,
    recommendation_id integer NOT NULL,
    prediction VARCHAR(150) NOT NULL,
    cultural_work_tasks_id integer NOT NULL,
    status_id integer DEFAULT (SELECT status_id FROM status WHERE name = 'Pendiente' AND status_type_id = (SELECT status_type_id FROM status_type WHERE name = 'Detection')) NOT NULL
);

CREATE TABLE users (
    user_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(150) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    verification_token VARCHAR(255),
    session_token VARCHAR(255),
    status_id integer NOT NULL,
    fcm_token VARCHAR(255)
);

CREATE TABLE invitation (
    invitation_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(150) NOT NULL,
    suggested_role VARCHAR(255) NOT NULL,
    status_id integer DEFAULT (SELECT status_id FROM status WHERE name = 'Pendiente' AND status_type_id = (SELECT status_type_id FROM status_type WHERE name = 'Invitation')) NOT NULL,
    farm_id integer NOT NULL,
    inviter_user_id integer NOT NULL,
    date timestamp NOT NULL
);

CREATE TABLE notification_type (
    notification_type_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE notifications (
    notifications_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    message VARCHAR(255),
    date timestamp NOT NULL,
    user_id integer NOT NULL,
    invitation_id integer,
    notification_type_id integer,
    farm_id integer NOT NULL,
    status_id integer NOT NULL
);

CREATE TABLE permission (
    permission_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description VARCHAR(200) NOT NULL,
    name VARCHAR(255) UNIQUE
);

CREATE TABLE plot (
    plot_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    longitude NUMERIC(11, 8) CHECK (longitude BETWEEN -180 AND 180),
    latitude NUMERIC(11, 8) CHECK (latitude BETWEEN -90 AND 90),
    altitude NUMERIC(10, 2),
    coffee_variety_id integer NOT NULL,
    farm_id integer NOT NULL,
    status_id integer NOT NULL
);

CREATE TABLE recommendation (
    recommendation_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    recommendation VARCHAR(255) NOT NULL,
    name VARCHAR(45) NOT NULL
);

CREATE TABLE role (
    role_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE role_permission (
    role_id integer NOT NULL,
    permission_id integer NOT NULL,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE status_type (
    status_type_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE status (
    status_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(45) NOT NULL,
    status_type_id integer NOT NULL
);

CREATE TABLE transaction (
    transaction_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    plot_id integer NOT NULL,
    description VARCHAR(255),
    transaction_type_id integer NOT NULL,
    transaction_date date NOT NULL,
    status_id integer NOT NULL,
    value numeric(15, 2) NOT NULL,
    transaction_category_id integer NOT NULL,
    creator_id integer NOT NULL
);

CREATE TABLE transaction_type (
    transaction_type_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE transaction_category (
    transaction_category_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    transaction_type_id integer NOT NULL
);

CREATE TABLE unit_of_measure_type (
    unit_of_measure_type_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE unit_of_measure (
    unit_of_measure_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    abbreviation VARCHAR(10) NOT NULL UNIQUE,
    unit_of_measure_type_id integer NOT NULL
);

CREATE TABLE farm (
    farm_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    area numeric(10,2) NOT NULL,
    area_unit_id integer NOT NULL,
    status_id integer NOT NULL
);

CREATE TABLE user_role_farm (
    user_role_farm_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_id integer NOT NULL,
    user_id integer NOT NULL,
    farm_id integer NOT NULL,
    status_id integer DEFAULT (SELECT status_id FROM status WHERE name = 'Activo' AND status_type_id = (SELECT status_type_id FROM status_type WHERE name = 'user_role_farm')) NOT NULL,
    UNIQUE(user_id, role_id, farm_id)
);

-- FOREIGN KEYS

ALTER TABLE cultural_work_tasks
    ADD CONSTRAINT fk_cultural_work_tasks_cultural_works FOREIGN KEY (cultural_works_id) REFERENCES cultural_works(cultural_works_id);

ALTER TABLE cultural_work_tasks
    ADD CONSTRAINT fk_cultural_work_tasks_plot FOREIGN KEY (plot_id) REFERENCES plot(plot_id);

ALTER TABLE cultural_work_tasks
    ADD CONSTRAINT fk_cultural_work_tasks_status FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE cultural_work_tasks 
    ADD CONSTRAINT fk_cultural_work_tasks_collaborator_user FOREIGN KEY (collaborator_user_id) REFERENCES users(user_id);

ALTER TABLE cultural_work_tasks 
    ADD CONSTRAINT fk_cultural_work_tasks_owner_user FOREIGN KEY (owner_user_id) REFERENCES users(user_id);

ALTER TABLE farm
    ADD CONSTRAINT fk_farm_area_unit_id FOREIGN KEY (area_unit_id) REFERENCES unit_of_measure(unit_of_measure_id);

ALTER TABLE flowering
    ADD CONSTRAINT fk_flowering_plot_id FOREIGN KEY (plot_id) REFERENCES plot(plot_id) ON DELETE CASCADE;

ALTER TABLE flowering
    ADD CONSTRAINT fk_flowering_status_id FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE flowering
    ADD CONSTRAINT fk_flowering_type_id FOREIGN KEY (flowering_type_id) REFERENCES flowering_type(flowering_type_id);

ALTER TABLE health_checks
    ADD CONSTRAINT fk_health_checks_cultural_work_tasks FOREIGN KEY (cultural_work_tasks_id) REFERENCES cultural_work_tasks(cultural_work_tasks_id) ON DELETE CASCADE;

ALTER TABLE health_checks
    ADD CONSTRAINT fk_health_checks_recommendation FOREIGN KEY (recommendation_id) REFERENCES recommendation(recommendation_id);

ALTER TABLE health_checks
    ADD CONSTRAINT fk_health_checks_status FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE invitation
    ADD CONSTRAINT fk_invitation_farm_id FOREIGN KEY (farm_id) REFERENCES farm(farm_id) ON DELETE CASCADE;

ALTER TABLE invitation
    ADD CONSTRAINT fk_invitation_status_id FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE invitation
    ADD CONSTRAINT fk_invitation_user FOREIGN KEY (inviter_user_id) REFERENCES users(user_id);

ALTER TABLE notifications
    ADD CONSTRAINT fk_notifications_notification_type_id FOREIGN KEY (notification_type_id) REFERENCES notification_type(notification_type_id) ON DELETE CASCADE;

ALTER TABLE notifications
    ADD CONSTRAINT fk_notifications_status_id FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE notifications
    ADD CONSTRAINT fk_notifications_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE;

ALTER TABLE notifications
    ADD CONSTRAINT fk_notifications_farm_id FOREIGN KEY (farm_id) REFERENCES farm(farm_id);

ALTER TABLE notifications 
    ADD CONSTRAINT fk_notifications_invitation_id FOREIGN KEY (invitation_id) REFERENCES invitation(invitation_id);

ALTER TABLE plot
    ADD CONSTRAINT fk_plot_coffee_variety_id FOREIGN KEY (coffee_variety_id) REFERENCES coffee_variety(coffee_variety_id);

ALTER TABLE plot
    ADD CONSTRAINT fk_plot_farm_id FOREIGN KEY (farm_id) REFERENCES farm(farm_id) ON DELETE CASCADE;

ALTER TABLE plot
    ADD CONSTRAINT fk_plot_status_id FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE role_permission
    ADD CONSTRAINT fk_role_permission_permission_id FOREIGN KEY (permission_id) REFERENCES permission(permission_id) ON DELETE CASCADE;

ALTER TABLE role_permission
    ADD CONSTRAINT fk_role_permission_role_id FOREIGN KEY (role_id) REFERENCES role(role_id) ON DELETE CASCADE;

ALTER TABLE status
    ADD CONSTRAINT fk_status_status_type_id FOREIGN KEY (status_type_id) REFERENCES status_type(status_type_id);

ALTER TABLE transaction
    ADD CONSTRAINT fk_transaction_plot_id FOREIGN KEY (plot_id) REFERENCES plot(plot_id) ON DELETE CASCADE;

ALTER TABLE transaction
    ADD CONSTRAINT fk_transaction_status_id FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE transaction
    ADD CONSTRAINT fk_transaction_transaction_category_id FOREIGN KEY (transaction_category_id) REFERENCES transaction_category(transaction_category_id);

ALTER TABLE transaction
    ADD CONSTRAINT fk_transaction_transaction_type_id FOREIGN KEY (transaction_type_id) REFERENCES transaction_type(transaction_type_id);

ALTER TABLE transaction 
    ADD CONSTRAINT fk_transaction_creator FOREIGN KEY (creator_id) REFERENCES users(user_id);

ALTER TABLE transaction_category
    ADD CONSTRAINT fk_transaction_type FOREIGN KEY (transaction_type_id) REFERENCES transaction_type(transaction_type_id) ON DELETE CASCADE;

ALTER TABLE unit_of_measure
    ADD CONSTRAINT fk_unit_of_measure_unit_of_measure_type_id FOREIGN KEY (unit_of_measure_type_id) REFERENCES unit_of_measure_type(unit_of_measure_type_id);

ALTER TABLE user_role_farm
    ADD CONSTRAINT fk_user_role_farm_farm_id FOREIGN KEY (farm_id) REFERENCES farm(farm_id) ON DELETE CASCADE;

ALTER TABLE user_role_farm
    ADD CONSTRAINT fk_user_role_farm_role_id FOREIGN KEY (role_id) REFERENCES role(role_id) ON DELETE CASCADE;

ALTER TABLE user_role_farm
    ADD CONSTRAINT fk_user_role_farm_status_id FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE user_role_farm
    ADD CONSTRAINT fk_user_role_farm_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE;

ALTER TABLE users
    ADD CONSTRAINT fk_users_status_id FOREIGN KEY (status_id) REFERENCES status(status_id);

-- Confirmar la transacción si todo va bien
COMMIT;