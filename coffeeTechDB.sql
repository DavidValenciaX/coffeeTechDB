BEGIN;

-- TABLES

-- USERS

CREATE TABLE user_states (
    user_state_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(45) NOT NULL UNIQUE
);

CREATE TABLE user_sessions (
    user_session_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER NOT NULL,
    session_token VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(150) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    verification_token VARCHAR(255) UNIQUE,
    user_state_id INTEGER NOT NULL
);

CREATE TABLE roles (
    role_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE permissions (
    permission_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description VARCHAR(200) NOT NULL,
    name VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE role_permission (
    role_id INTEGER NOT NULL,
    permission_id INTEGER NOT NULL,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_role (
    user_role_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER NOT NULL,
    role_id INTEGER NOT NULL,
    UNIQUE(user_id, role_id)
);

-- FARMS

CREATE TABLE area_units (
    area_unit_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    abbreviation VARCHAR(10) NOT NULL UNIQUE
);

CREATE TABLE farm_states (
    farm_state_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(45) NOT NULL UNIQUE
);

CREATE TABLE farms (
    farm_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    area NUMERIC(10,2) NOT NULL,
    area_unit_id INTEGER NOT NULL,
    farm_state_id INTEGER NOT NULL,
    CHECK (area > 0)
);

CREATE TABLE user_role_farm_states (
    user_role_farm_state_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(45) NOT NULL UNIQUE
);

CREATE TABLE user_role_farm (
    user_role_farm_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_role_id INTEGER NOT NULL,
    farm_id INTEGER NOT NULL,
    user_role_farm_state_id INTEGER NOT NULL,
    UNIQUE(user_role_id, farm_id)
);

CREATE TABLE coffee_varieties (
    coffee_variety_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE plot_states (
    plot_state_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(45) NOT NULL UNIQUE
);

CREATE TABLE plots (
    plot_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    longitude NUMERIC(11, 8) CHECK (longitude BETWEEN -180 AND 180),
    latitude NUMERIC(11, 8) CHECK (latitude BETWEEN -90 AND 90),
    altitude NUMERIC(10, 2) CHECK (altitude >= 0 AND altitude <= 3000),
    coffee_variety_id INTEGER NOT NULL,
    farm_id INTEGER NOT NULL,
    plot_state_id INTEGER NOT NULL,
    UNIQUE(name, farm_id)
);

-- INVITATIONS

CREATE TABLE invitation_states (
    invitation_state_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(45) NOT NULL UNIQUE
);

CREATE TABLE invitations (
    invitation_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    invited_user_id INTEGER NOT NULL,
    suggested_role_id INTEGER NOT NULL,
    invitation_state_id INTEGER NOT NULL,
    entity_type VARCHAR(50) NOT NULL,
    entity_id INTEGER NOT NULL,
    inviter_user_id INTEGER NOT NULL,
    invitation_date TIMESTAMP WITH TIME ZONE NOT NULL,
    UNIQUE(invited_user_id, entity_type, entity_id)
);

-- NOTIFICATIONS

CREATE TABLE notification_states (
    notification_state_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(45) NOT NULL UNIQUE
);

CREATE TABLE notification_types (
    notification_type_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE notifications (
    notification_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    message VARCHAR(255),
    notification_date TIMESTAMP WITH TIME ZONE NOT NULL,
    entity_id INTEGER,
    notification_type_id INTEGER NOT NULL,
    notification_state_id INTEGER NOT NULL
);

CREATE TABLE user_devices (
    user_device_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER NOT NULL,
    fcm_token VARCHAR(255) NOT NULL,
    UNIQUE (user_id, fcm_token)
);

CREATE TABLE notification_devices (
    notification_device_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    notification_id  INTEGER NOT NULL,
    user_device_id   INTEGER NOT NULL,
    UNIQUE (notification_id, user_device_id)
);

-- TRANSACTIONS

CREATE TABLE transaction_states (
    transaction_state_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(45) NOT NULL UNIQUE
);

CREATE TABLE transaction_types (
    transaction_type_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE transaction_categories (
    transaction_category_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    transaction_type_id INTEGER NOT NULL,
    UNIQUE(name, transaction_type_id)
);

CREATE TABLE transactions (
    transaction_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description VARCHAR(255),
    entity_type VARCHAR(50) NOT NULL,
    entity_id INTEGER NOT NULL,
    transaction_date DATE NOT NULL,
    transaction_state_id INTEGER NOT NULL,
    value NUMERIC(15, 2) NOT NULL,
    transaction_category_id INTEGER NOT NULL,
    creator_id INTEGER NOT NULL
);

-- FOREIGN KEYS

--USERS

ALTER TABLE users
    ADD CONSTRAINT fk_users_user_state_id FOREIGN KEY (user_state_id) REFERENCES user_states(user_state_id);

ALTER TABLE user_sessions
    ADD CONSTRAINT fk_user_sessions_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE;

ALTER TABLE role_permission
    ADD CONSTRAINT fk_role_permission_permission_id FOREIGN KEY (permission_id) REFERENCES permissions(permission_id) ON DELETE CASCADE;

ALTER TABLE role_permission
    ADD CONSTRAINT fk_role_permission_role_id FOREIGN KEY (role_id) REFERENCES roles(role_id) ON DELETE CASCADE;

ALTER TABLE user_role
    ADD CONSTRAINT fk_user_role_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE;

ALTER TABLE user_role
    ADD CONSTRAINT fk_user_role_role_id FOREIGN KEY (role_id) REFERENCES roles(role_id) ON DELETE CASCADE;

-- FARMS

ALTER TABLE farms
    ADD CONSTRAINT fk_farm_area_unit_id FOREIGN KEY (area_unit_id) REFERENCES area_units(area_unit_id);

ALTER TABLE farms
    ADD CONSTRAINT fk_farm_farm_state_id FOREIGN KEY (farm_state_id) REFERENCES farm_states(farm_state_id);

ALTER TABLE plots
    ADD CONSTRAINT fk_plot_coffee_variety_id FOREIGN KEY (coffee_variety_id) REFERENCES coffee_varieties(coffee_variety_id);

ALTER TABLE plots
    ADD CONSTRAINT fk_plot_farm_id FOREIGN KEY (farm_id) REFERENCES farms(farm_id) ON DELETE CASCADE;

ALTER TABLE plots
    ADD CONSTRAINT fk_plot_plot_state_id FOREIGN KEY (plot_state_id) REFERENCES plot_states(plot_state_id);

ALTER TABLE user_role_farm
    ADD CONSTRAINT fk_user_role_farm_farm_id FOREIGN KEY (farm_id) REFERENCES farms(farm_id) ON DELETE CASCADE;

ALTER TABLE user_role_farm
    ADD CONSTRAINT fk_user_role_farm_user_role_farm_state_id FOREIGN KEY (user_role_farm_state_id) REFERENCES user_role_farm_states(user_role_farm_state_id);

ALTER TABLE user_role_farm
    ADD CONSTRAINT fk_user_role_farm_user_role_id FOREIGN KEY (user_role_id) REFERENCES user_role(user_role_id) ON DELETE CASCADE;

-- INVITATIONS

ALTER TABLE invitations
    ADD CONSTRAINT fk_invitation_invitation_state_id FOREIGN KEY (invitation_state_id) REFERENCES invitation_states(invitation_state_id);

ALTER TABLE invitations
    ADD CONSTRAINT fk_invitation_invited_user FOREIGN KEY (invited_user_id) REFERENCES users(user_id);

ALTER TABLE invitations
    ADD CONSTRAINT fk_invitation_inviter_user FOREIGN KEY (inviter_user_id) REFERENCES users(user_id);

ALTER TABLE invitations
    ADD CONSTRAINT fk_invitation_role FOREIGN KEY (suggested_role_id) REFERENCES roles(role_id) ON DELETE RESTRICT ON UPDATE CASCADE;

-- NOTIFICATIONS

ALTER TABLE notifications
    ADD CONSTRAINT fk_notifications_notification_type_id FOREIGN KEY (notification_type_id) REFERENCES notification_types(notification_type_id) ON DELETE CASCADE;

ALTER TABLE notifications
    ADD CONSTRAINT fk_notifications_notification_state_id FOREIGN KEY (notification_state_id) REFERENCES notification_states(notification_state_id);

ALTER TABLE notification_devices
    ADD CONSTRAINT fk_notification_devices_notification_id FOREIGN KEY (notification_id) REFERENCES notifications(notification_id) ON DELETE CASCADE;

ALTER TABLE notification_devices
    ADD CONSTRAINT fk_notification_devices_user_device_id FOREIGN KEY (user_device_id) REFERENCES user_devices(user_device_id) ON DELETE CASCADE;

ALTER TABLE user_devices
    ADD CONSTRAINT fk_user_devices_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE;

-- TRANSACTIONS

ALTER TABLE transactions
    ADD CONSTRAINT fk_transaction_transaction_category_id FOREIGN KEY (transaction_category_id) REFERENCES transaction_categories(transaction_category_id);

ALTER TABLE transactions 
    ADD CONSTRAINT fk_transaction_creator FOREIGN KEY (creator_id) REFERENCES users(user_id);

ALTER TABLE transactions
    ADD CONSTRAINT fk_transaction_transaction_state_id FOREIGN KEY (transaction_state_id) REFERENCES transaction_states(transaction_state_id);

ALTER TABLE transaction_categories
    ADD CONSTRAINT fk_transaction_type FOREIGN KEY (transaction_type_id) REFERENCES transaction_types(transaction_type_id) ON DELETE CASCADE;

-- Confirmar la transacciÃ³n si todo va bien
COMMIT;