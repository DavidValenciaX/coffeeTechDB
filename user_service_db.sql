-- BASIC CONFIGURATION
SET client_encoding = 'UTF8';

BEGIN;

-- TABLES

-- Status related tables (potentially filtered for User service context)
CREATE TABLE status_type (
    status_type_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE status (
    status_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(45) NOT NULL,
    status_type_id integer NOT NULL,
    UNIQUE(name, status_type_id)
);

-- Core User tables
CREATE TABLE users (
    user_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(150) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    verification_token VARCHAR(255),
    session_token VARCHAR(255),
    status_id integer NOT NULL,
    fcm_token VARCHAR(255)
);

CREATE TABLE role (
    role_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE permission (
    permission_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description VARCHAR(200) NOT NULL,
    name VARCHAR(255) UNIQUE
);

CREATE TABLE role_permission (
    role_id integer NOT NULL,
    permission_id integer NOT NULL,
    PRIMARY KEY (role_id, permission_id)
);

CREATE TABLE user_role_farm (
    user_role_farm_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role_id integer NOT NULL,
    user_id integer NOT NULL,
    farm_id integer NOT NULL,
    status_id integer NOT NULL,
    UNIQUE(user_id, role_id, farm_id)
);

CREATE TABLE invitation (
    invitation_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR(150) NOT NULL,
    suggested_role VARCHAR(255) NOT NULL, -- Consider linking to role_id if roles are fixed
    status_id integer NOT NULL,
    farm_id integer NOT NULL,
    inviter_user_id integer NOT NULL,
    date timestamp NOT NULL
);

-- Notification tables
CREATE TABLE notification_type (
    notification_type_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE notifications (
    notifications_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    message VARCHAR(255),
    date timestamp NOT NULL,
    user_id integer NOT NULL,
    invitation_id integer,
    notification_type_id integer,
    status_id integer NOT NULL,
    farm_id integer NOT NULL
);

-- FOREIGN KEYS (within User service domain)

ALTER TABLE status
    ADD CONSTRAINT fk_status_status_type_id FOREIGN KEY (status_type_id) REFERENCES status_type(status_type_id);

ALTER TABLE users
    ADD CONSTRAINT fk_users_status_id FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE role_permission
    ADD CONSTRAINT fk_role_permission_permission_id FOREIGN KEY (permission_id) REFERENCES permission(permission_id) ON DELETE CASCADE;

ALTER TABLE role_permission
    ADD CONSTRAINT fk_role_permission_role_id FOREIGN KEY (role_id) REFERENCES role(role_id) ON DELETE CASCADE;

ALTER TABLE user_role_farm
    ADD CONSTRAINT fk_user_role_farm_role_id FOREIGN KEY (role_id) REFERENCES role(role_id) ON DELETE CASCADE;

ALTER TABLE user_role_farm
    ADD CONSTRAINT fk_user_role_farm_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE;

ALTER TABLE user_role_farm
    ADD CONSTRAINT fk_user_role_farm_status_id FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE invitation
    ADD CONSTRAINT fk_invitation_status_id FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE invitation
    ADD CONSTRAINT fk_invitation_user FOREIGN KEY (inviter_user_id) REFERENCES users(user_id);

ALTER TABLE notifications
    ADD CONSTRAINT fk_notifications_notification_type_id FOREIGN KEY (notification_type_id) REFERENCES notification_type(notification_type_id) ON DELETE CASCADE;

ALTER TABLE notifications
    ADD CONSTRAINT fk_notifications_status_id FOREIGN KEY (status_id) REFERENCES status(status_id);

ALTER TABLE notifications
    ADD CONSTRAINT fk_notifications_user_id FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE;

ALTER TABLE notifications
    ADD CONSTRAINT fk_notifications_invitation_id FOREIGN KEY (invitation_id) REFERENCES invitation(invitation_id) ON DELETE SET NULL;

COMMIT;